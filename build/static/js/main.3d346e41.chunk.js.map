{"version":3,"sources":["utils/API.js","components/SearchBar.js","components/VideoDetail.js","components/VideoList.js","App.js","serviceWorker.js","index.js"],"names":["searchYouTube","term","axios","get","params","part","q","type","key","process","FormWrapper","styled","FormGroup","SearchBar","state","handleInputChange","event","setState","target","value","props","Form","onSubmit","preventDefault","Label","for","hidden","Input","name","id","placeholder","this","onChange","onClick","Component","VideoDetail","selectedVideo","videoId","videoUrl","className","title","snippet","src","allowFullScreen","description","List","ul","ListItem","li","active","VideoList","children","VideoListItem","video","onVideoSelect","thumbnails","medium","url","alt","App","videos","API","then","res","data","items","catch","err","console","log","throttledSearch","_","debounce","Container","Row","Col","md","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qWAMe,GACXA,cAAe,SAAUC,GACrB,OAAOC,IAAMC,IAAI,+CAAgD,CAC7DC,OAAQ,CACJC,KAAM,UACNC,EAAGL,EACHM,KAAM,QACNC,IAVDC,+C,yYCCf,IAAMC,EAAcC,YAAOC,IAAPD,CAAH,KAoDFE,E,2MAlCXC,MAAQ,CACJb,KAAM,I,EAGVc,kBAAoB,SAACC,GAIjB,EAAKC,SAAS,CAAEhB,KAAMe,EAAME,OAAOC,QAEnC,EAAKC,MAAMpB,cAAcgB,EAAME,OAAOC,Q,wEAIhC,IAAD,OACL,OACI,kBAACE,EAAA,EAAD,CAAMC,SAAW,SAAAN,GAAK,OAAIA,EAAMO,mBAChC,kBAACb,EAAD,KACE,kBAACc,EAAA,EAAD,CAAOC,IAAI,gBAAgBC,QAAM,GAAjC,kBACA,kBAACC,EAAA,EAAD,CACEpB,KAAK,OACLqB,KAAK,gBACLC,GAAG,gBACHC,YAAY,yBACZX,MAAOY,KAAKjB,MAAMb,KAClB+B,SAAUD,KAAKhB,oBAEf,0BAAMkB,QAAS,kBAAK,EAAKhB,SAAS,CAAEhB,KAAM,OAA1C,W,GA5BQiC,aCOTC,EAvBK,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAGnB,IAAKA,EAAe,OAAO,yDAG3B,IAAMC,EAAUD,EAAcP,GAAGQ,QAC3BC,EAAQ,wCAAoCD,EAApC,UAKd,OACI,iCACI,yBAAKE,UAAU,2CACX,4BAAQA,UAAU,wBAAwBC,MAAOJ,EAAcK,QAAQD,MAAOE,IAAKJ,EAAUK,iBAAe,KAEhH,4BAAKP,EAAcK,QAAQD,OAC3B,2BAAIJ,EAAcK,QAAQG,e,yYCnBtC,IAAMC,EAAOlC,IAAOmC,GAAV,KAKJC,EAAWpC,IAAOqC,GAAV,KAII,SAAA5B,GAAK,OAAIA,EAAM6B,OAAS,0BAA4B,oBAWzDC,EAAY,SAAC9B,GAGtB,OACI,kBAACyB,EAAD,KAAOzB,EAAM+B,WAIRC,EAAgB,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAOjB,EAAkC,EAAlCA,cAAekB,EAAmB,EAAnBA,cAEjD,OACI,kBAACP,EAAD,CAAUE,OAAQI,IAAUjB,GACxB,yBACIM,IAAKW,EAAMZ,QAAQc,WAAWC,OAAOC,IACrCC,IAAKL,EAAMZ,QAAQD,MACnBP,QAAU,kBAAMqB,EAAcD,QCgC/BM,E,2MA7Db7C,MAAQ,CACN8C,OAAQ,GACRxB,cAAe,M,EAUjBpC,cAAgB,SAAAC,GACd4D,EAAI7D,cAAcC,GAEjB6D,MAAK,SAAAC,GAAG,OAAI,EAAK9C,SAAS,CAAE2C,OAAQG,EAAIC,KAAKC,MAAO7B,cAAe2B,EAAIC,KAAKC,MAAM,QAClFC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAG5Bb,cAAgB,SAAAlB,GACd,EAAKnB,SAAU,CAACmB,cAAeA,K,EAIjCkC,gBAAkBC,IAAEC,SAAU,EAAKxE,cAAe,K,mFAfhD+B,KAAK/B,cAAc,c,+BAoBX,IAAD,OACP,OACE,kBAACyE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,0CACA,kBAAC,EAAD,CAAW3E,cAAe+B,KAAKuC,oBAGnC,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,CAAaxC,cAAeL,KAAKjB,MAAMsB,iBAEzC,kBAACuC,EAAA,EAAD,CAAKC,GAAG,KACN,kBAAC,EAAD,KAEG7C,KAAKjB,MAAM8C,OAAOiB,KAAI,SAAAxB,GAAK,OAC1B,kBAAC,EAAD,CACEA,MAAOA,EACP7C,IAAK6C,EAAMxB,GAAGQ,QACdD,cAAe,EAAKtB,MAAMsB,cAC1BkB,cAAe,EAAKA,2B,GAnDpBpB,aCGE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,kB","file":"static/js/main.3d346e41.chunk.js","sourcesContent":["//can't use ajax because there is no jquery\nimport axios from \"axios\";\n\nconst apiKey = process.env.REACT_APP_YOUTUBE_API_KEY;\n\n//group all api calls\nexport default {\n    searchYouTube: function (term) {\n        return axios.get(\"https://www.googleapis.com/youtube/v3/search\", {\n            params: {\n                part: \"snippet\",\n                q: term,\n                type: \"video\",\n                key: apiKey\n            }\n        })\n    }\n}","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\n\nconst FormWrapper = styled(FormGroup)`\n    position: relative;\n    span {\n        font-weight: 700;\n        font-side: 32px;\n        color: red;\n        position: absolute;\n        right: 10px;\n        top: 7px;\n        :hover {\n            color: darkred;\n            cursor: pointer;\n        }\n    }\n`\n//Since FormGroup already exists in react is needs to be in ()\n\nclass SearchBar extends Component {\n    state = {\n        term: \"\"\n    }\n\n    handleInputChange = (event) => {\n        //console.log(\"event.target.value\", event.target.value);\n        //could skip the () for a single argument function\n        //update state of term\n        this.setState({ term: event.target.value })\n        //run a youtube search based on term\n        this.props.searchYouTube(event.target.value);\n        //console.log(\"this.state.term\", this.state.term)\n    }\n\n    render() {\n        return (\n            <Form onSubmit={ event => event.preventDefault()}>\n            <FormWrapper>\n              <Label for=\"youTubeSearch\" hidden>YouTube Search</Label>\n              <Input\n                type=\"text\"\n                name=\"youTubeSearch\"\n                id=\"youTubeSearch\"\n                placeholder=\"Search for videos here\"\n                value={this.state.term}\n                onChange={this.handleInputChange}\n                />\n                <span onClick={()=> this.setState({ term: \"\" })}>X</span>\n            </FormWrapper>\n            </Form>\n        )\n    }\n}\n\nexport default SearchBar;\n\n//An alternate way to write the same thing\n//this would work except the () implies an explicit return but then a console.log won't work!\n// const SearchBar = () => (\n//     <h2>Search Bar</h2>\n// )","import React from \"react\";\n\n//pulling props.selectedVideo off into the const name 'selectedVideo'\n//wrap in a 'section' as react expects a single html element\n//use an If to catch inital load before\nconst VideoDetail = ({ selectedVideo}) => {\n    //Again by doing {selectedVideo} helps to destructure so we don't have to do props.selectedVideo everytime...\n    //This component renders BEFORE the axios call returns a result\n    if (!selectedVideo) return <h2>loading spinner goes here</h2>;\n    //This line is required due to the lag in the axios response, oterwise it will cause an error\n\n    const videoId = selectedVideo.id.videoId;\n    const videoUrl = `https://www.youtube.com/embed/${videoId}?rel=0`\n\n    //console.log(videoUrl);\n\n    //All JSX goes within your Return statement\n    return (\n        <section>\n            <div className=\"embed-responsive embed-responsive-16by9\">\n                <iframe className=\"embed-responsive-item\" title={selectedVideo.snippet.title} src={videoUrl} allowFullScreen></iframe>\n            </div>\n            <h2>{selectedVideo.snippet.title}</h2>\n            <p>{selectedVideo.snippet.description}</p>\n        </section>\n    )\n}\n\nexport default VideoDetail;\n\n//note return <h2>Video Detail</h2> would work as well but it might ","import React from \"react\";\nimport styled from \"styled-components\";\n\n//Styled components, back ticks `` allows you to write template literals!!\nconst List = styled.ul`\n    list-style: none;\n    padding-left: 0;\n`\n\nconst ListItem = styled.li`\n    margin-bottom: 1em;\n    text-align: right;\n    img {\n        border: ${props => props.active ? \"5px solid palevioletred\" : \"2px solid gray\"};\n        border-radius: 10px;\n        cursor: pointer;\n        :hover {\n            border-color: red;\n        }\n    }\n`\n\n//The ${JavaScript goes here} in template literals...\n\nexport const VideoList = (props) => {\n    //gives permission for this to act as a wrapper element and for other elements \n    //(components) to be rendered inside\n    return (\n        <List>{props.children}</List>\n    )\n}\n\nexport const VideoListItem = ({video, selectedVideo, onVideoSelect}) => {\n    //console.log(video);\n    return (\n        <ListItem active={video === selectedVideo}>\n            <img\n                src={video.snippet.thumbnails.medium.url}\n                alt={video.snippet.title}\n                onClick={ () => onVideoSelect(video)}\n            />\n        </ListItem>\n    )\n}\n\n//An alternative would be this:\n// import React from \"react\";\n\n// const VideoList = () => {\n//     return (\n//         <h2>Video List</h2>\n//     )\n// }\n\n// const VideoListItem = () => {\n//     return (\n//         <h2>Video List Item</h2>\n//     )\n// }\n\n// export {VideoList, VideoListItem};","import React, { Component} from 'react';\n// the { component} simply allows us to use Component as a variable vs the more verbose react.component\nimport _ from \"lodash\";\nimport {Container, Row, Col} from \"reactstrap\";\nimport API from \"./utils/API\"\nimport SearchBar from \"./components/SearchBar\";\nimport VideoDetail from \"./components/VideoDetail\";\nimport {VideoList, VideoListItem} from \"./components/VideoList\";\n\nclass App extends Component {\n  state = {\n    videos: [],\n    selectedVideo: null\n  }\n\n  //componentDidMount only renders the first time the page loads\n  //this.setState is required for forcing a render of that component\n  componentDidMount() {\n    //call that youtube api\n    this.searchYouTube(\"React.js\")\n  }\n\n  searchYouTube = term => {\n    API.searchYouTube(term)\n    //this will capture the return value from the call above\n    .then(res => this.setState({ videos: res.data.items, selectedVideo: res.data.items[0]}))\n    .catch(err => console.log(err));\n  }\n\n  onVideoSelect = selectedVideo => {\n    this.setState( {selectedVideo: selectedVideo } );\n  }\n\n  //1000 milliseconds = 1 sec\n  throttledSearch = _.debounce( this.searchYouTube, 800 );\n\n  //IF your selected item name matches the value you can simply do { slectedVideo } to equal both\n  //This function is available to the child components...IF we pass as a prop, ie this.onVideoSelect\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1>React-Tube</h1>\n            <SearchBar searchYouTube={this.throttledSearch}/>\n          </Col>\n        </Row>\n        <Row>\n          <Col md=\"8\">\n            <VideoDetail selectedVideo={this.state.selectedVideo}/>\n          </Col>\n          <Col md=\"4\">\n            <VideoList>\n              {/* .map creates a NEW array from an existing array (ie this.state.videos). Why? because you can't (or shouldn't) mutate state. So if your original array contains say 4 items, the .map --- Also, the \"key\" is required for React and is ONLY available to React */}\n              {this.state.videos.map(video => (\n                <VideoListItem\n                  video={video}\n                  key={video.id.videoId}\n                  selectedVideo={this.state.selectedVideo}\n                  onVideoSelect={this.onVideoSelect}\n                  />\n              ))}\n            </VideoList>\n          </Col>\n        </Row>\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport \"./index.css\";\nimport \"./paralax_stars.css\";\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}